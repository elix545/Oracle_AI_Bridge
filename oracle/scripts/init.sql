-- Crear usuario middleware
CREATE USER middleware IDENTIFIED BY oracle;

-- Otorgar privilegios necesarios al usuario middleware
GRANT CONNECT, RESOURCE TO middleware;
GRANT CREATE SESSION TO middleware;
GRANT CREATE TABLE TO middleware;
GRANT CREATE SEQUENCE TO middleware;
GRANT CREATE PROCEDURE TO middleware;
GRANT UNLIMITED TABLESPACE TO middleware;

-- Crear tabla principal en el esquema middleware
CREATE TABLE middleware.PROMPT_QUEUE (
  ID NUMBER(18) PRIMARY KEY,
  USUARIO VARCHAR2(35),
  MODULO VARCHAR2(4),
  TRANSICION VARCHAR2(4),
  PROMPT_REQUEST VARCHAR2(4000),
  PROMPT_RESPONSE VARCHAR2(4000),
  FLAG_LECTURA NUMBER(1) DEFAULT 0,
  FLAG_COMPLETADO NUMBER(1) DEFAULT 0,
  FECHA_REQUEST DATE DEFAULT SYSDATE,
  FECHA_RESPONSE DATE,
  FECHA_LECTURA DATE,
  MODEL VARCHAR2(50) DEFAULT NULL
);

-- Secuencia para el ID en el esquema middleware
CREATE SEQUENCE middleware.PROMPT_QUEUE_SEQ START WITH 1 INCREMENT BY 1;

-- Constraints
ALTER TABLE middleware.PROMPT_QUEUE ADD CONSTRAINT CHK_FLAG_LECTURA CHECK (FLAG_LECTURA IN (0,1));
ALTER TABLE middleware.PROMPT_QUEUE ADD CONSTRAINT CHK_FLAG_COMPLETADO CHECK (FLAG_COMPLETADO IN (0,1));

-- Funci칩n para insertar en el esquema middleware
CREATE OR REPLACE FUNCTION middleware.INSERT_PROMPT_REQUEST(
  P_USUARIO IN VARCHAR2,
  P_MODULO IN VARCHAR2,
  P_TRANSICION IN VARCHAR2,
  P_PROMPT_REQUEST IN VARCHAR2
) RETURN NUMBER IS
  NEW_ID NUMBER;
BEGIN
  INSERT INTO middleware.PROMPT_QUEUE (ID, USUARIO, MODULO, TRANSICION, PROMPT_REQUEST)
  VALUES (middleware.PROMPT_QUEUE_SEQ.NEXTVAL, P_USUARIO, P_MODULO, P_TRANSICION, P_PROMPT_REQUEST)
  RETURNING ID INTO NEW_ID;
  RETURN NEW_ID;
END;
/

-- Funci칩n para leer con timeout y reintentos en el esquema middleware
CREATE OR REPLACE FUNCTION middleware.READ_PROMPT_REQUEST(
  P_TIMEOUT_SECONDS IN NUMBER DEFAULT 10
) RETURN SYS_REFCURSOR IS
  CUR SYS_REFCURSOR;
  V_START_TIME DATE := SYSDATE;
BEGIN
  LOOP
    OPEN CUR FOR
      SELECT * FROM middleware.PROMPT_QUEUE
      WHERE FLAG_LECTURA = 0 AND FLAG_COMPLETADO = 0
      ORDER BY FECHA_REQUEST
      FETCH FIRST 1 ROWS ONLY;
    EXIT WHEN CUR%FOUND OR (SYSDATE - V_START_TIME) * 86400 > P_TIMEOUT_SECONDS;
    DBMS_LOCK.SLEEP(1);
  END LOOP;
  RETURN CUR;
END;
/

-- Job de limpieza mensual (solo si DBMS_SCHEDULER est치 disponible)
BEGIN
  DBMS_SCHEDULER.CREATE_JOB (
    job_name        => 'PROMPT_QUEUE_CLEANUP',
    job_type        => 'PLSQL_BLOCK',
    job_action      => 'BEGIN DELETE FROM middleware.PROMPT_QUEUE WHERE FECHA_REQUEST < SYSDATE - 30; END;',
    start_date      => TRUNC(ADD_MONTHS(SYSDATE, 1), 'MM'),
    repeat_interval => 'FREQ=MONTHLY;BYMONTHDAY=1',
    enabled         => TRUE
  );
EXCEPTION
  WHEN OTHERS THEN
    NULL; -- Ignorar errores si DBMS_SCHEDULER no est치 disponible
END;
/ 